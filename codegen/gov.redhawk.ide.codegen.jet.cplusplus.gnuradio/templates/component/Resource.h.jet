<%
/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of GNUHAWK.
 * 
 * GNUHAWK is free software: you can redistribute it and/or modify is under the 
 * terms of the GNU General Public License as published by the Free Software 
 * Foundation, either version 3 of the License, or (at your option) any later 
 * version.
 * 
 * GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * this program.  If not, see http://www.gnu.org/licenses/.
 */

%>
<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.gnuradio.template.component"
imports="gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.ImplementationSettings
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
mil.jpeojtrs.sca.scd.Uses

org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"


class="ResourceHTemplate"
skeleton="../generator.skeleton"
%>
<%
    TemplateParameter templ = (TemplateParameter) argument;
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    ImplementationSettings implSettings = templ.getImplSettings();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    EList<Uses> uses = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();

    // check if we have an output port for data flow
    String outputType = "";
    for (Uses entry : uses) {
    	String intName = entry.getRepID();
        if (intName.contains("BULKIO")) {
	    outputType = "BULKIO";
         }
    }
    String className = PREFIX + "_i";
    String baseClass = PREFIX + "_base";    
    String includeGuard = PREFIX.toUpperCase() + "_IMPL_H";
%>
/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of GNUHAWK.
 * 
 * GNUHAWK is free software: you can redistribute it and/or modify is under the 
 * terms of the GNU General Public License as published by the Free Software 
 * Foundation, either version 3 of the License, or (at your option) any later 
 * version.
 * 
 * GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * this program.  If not, see http://www.gnu.org/licenses/.
 */

#ifndef <%=includeGuard%>
#define <%=includeGuard%>

#include "<%=baseClass%>.h"

class <%=className%> : public <%=PREFIX%>_base
{
   public:
      <%=className%>(const char *uuid, const char *label);
      ~<%=className%>();

    //
    // createBlock
    //
    // Create the actual GNU Radio Block to that will perform the work method. The resulting
    // block object is assigned to gr_stpr
    //
    // Add property change callbacks for getter/setter methods
    //
    //
    void createBlock();

<% if ( !outputType.equals("") ) { %> 
    //
    // createOutputSRI
    //
    // Called by setupIOMappings when an output mapping is defined. For each output mapping
    // defined, a call to createOutputSRI will be issued with the associated output index.
    // This default SRI and StreamID will be saved to the mapping and pushed down stream via pushSRI.
    // The subclass is responsible for overriding behavior of this method. The index provide matches
    // the stream index number that will be use by the GR Block object
    //
    // @param idx : output stream index number to associate the returned SRI object with
    // @return sri : default SRI object passed down stream over a RedHawk port
    //      
    BULKIO::StreamSRI  createOutputSRI( int32_t idx );
      
 <% } %>
};

#endif
