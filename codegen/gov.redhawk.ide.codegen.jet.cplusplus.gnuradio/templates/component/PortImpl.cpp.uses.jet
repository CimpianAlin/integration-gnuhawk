<%
/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of GNUHAWK.
 * 
 * GNUHAWK is free software: you can redistribute it and/or modify is under the 
 * terms of the GNU General Public License as published by the Free Software 
 * Foundation, either version 3 of the License, or (at your option) any later 
 * version.
 * 
 * GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * this program.  If not, see http://www.gnu.org/licenses/.
 */

%>
<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.gnuradio.template.component"
imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.cplusplus.CppHelper
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.idl.Attribute
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation
java.util.ArrayList
java.util.Arrays
java.util.List
mil.jpeojtrs.sca.scd.Uses
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"
class="PortImplCppUsesTemplate"
skeleton="../generator.skeleton2" 
%><%
    TemplateParameter templ = (TemplateParameter) argument;
    Implementation impl = templ.getImpl();
    ImplementationSettings implSettings = templ.getImplSettings();
    SoftPkg softpkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softpkg, implSettings);
    EList<Uses> uses = softpkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getUses();
    Uses use = null;
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    CppHelper _cppHelper = new CppHelper();
    for (Uses entry : uses) {
        String intName = entry.getRepID();
        if (intName.equals(templ.getPortRepId())) {
            use = entry;
            break;
        }
    }

    if (templ.isGenClassImpl() && (!use.getRepID().equals("IDL:ExtendedEvent/MessageEvent:1.0"))) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, use.getRepID().split(":")[1], true);
        if (iface != null) {
            String nameSpace = iface.getNameSpace();
            String interfaceName = iface.getName();
%>
//RESOLVE PREPARE_ALT_LOGGING(<%=nameSpace%>_<%=interfaceName%>_Out_i,<%=PREFIX%>_i)
<%
            if ("BULKIO".equals(nameSpace)) {
%>
<%@ include file="BULKIOPortImpl.cpp.uses.jetinc"%>
<%
            } else {
%>

// ----------------------------------------------------------------------------------------
// <%=nameSpace%>_<%=interfaceName%>_Out_i definition
// ----------------------------------------------------------------------------------------
<%=nameSpace%>_<%=interfaceName%>_Out_i::<%=nameSpace%>_<%=interfaceName%>_Out_i(std::string port_name, <%=PREFIX%>_base *_parent) :
Port_Uses_base_impl(port_name)
{
    parent = static_cast<<%=PREFIX%>_i *> (_parent);
    recConnectionsRefresh = false;
    recConnections.length(0);
}

<%=nameSpace%>_<%=interfaceName%>_Out_i::~<%=nameSpace%>_<%=interfaceName%>_Out_i()
{
}

<%
            for (Operation op : iface.getOperations()) {
                int numParams = op.getParams().size();
                int numVector = 0;
                ArrayList<String> vectorList = new ArrayList<String>();
%>

<%=op.getCxxReturnType()%><%=_cppHelper.varReturnValue(op.getCxxReturnType(), op.getReturnType())%> <%=nameSpace%>_<%=interfaceName%>_Out_i::<%=op.getName()%>(<%
                if (numParams == 0) { %>)<%
                }
                for (int i = 0; i < numParams; i++) {
                    String iteratorBase = _cppHelper.getBaseSequenceMapping(op.getParams().get(i).getCxxType());
                    if (iteratorBase.length() > 11) {
                        if (iteratorBase.substring(0, 11).equals("std::vector")) {
                            numVector++;
                            vectorList.add(op.getParams().get(i).getName());
                        }
                    }
                %><%=_cppHelper.getCppMapping(op.getParams().get(i).getCxxType())%><%
                %> <%=op.getParams().get(i).getName()%><%
                    if (i == (numParams - 1)) {
                        %>)<%
                    } else {
                        %>, <%
                    }
                } // end for params
%>
{
<%
                if (!"void".equals(op.getCxxReturnType())) {
                    String initialValue = _cppHelper.getInitialValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength());
%>
    <%=op.getCxxReturnType()%><%=_cppHelper.varReturnValue(op.getCxxReturnType(), op.getReturnType())%> retval<%if (!"".equals(initialValue)) {%> = <%=initialValue%><%}%>;
<%
                }
%>
    std::vector < std::pair < <%=nameSpace%>::<%=interfaceName%>_var, std::string > >::iterator i;

    boost::mutex::scoped_lock lock(updatingPortsLock);   // don't want to process while command information is coming in

<%
                    for (int i = 0; i < numVector; i++) {
%>
    Sequence_<%=op.getName()%>_<%=i%>.length(<%=vectorList.get(i)%>.size());
    memcpy(&Sequence_<%=op.getName()%>_<%=i%>[0], &<%=vectorList.get(i)%>[0], <%=vectorList.get(i)%>.size() * sizeof(<%=vectorList.get(i)%>[0]));

<%
                    }
%>
    if (active) {
        for (i = outConnections.begin(); i != outConnections.end(); ++i) {
            try {
                
            <%  if (!"void".equals(op.getCxxReturnType())) {%>retval =<%} else {}%>((*i).first)-><%=op.getName()%>(<%if (numParams == 0) {%>);<%
                }
                for (int j = 0; j < numParams; j++) {
                    String paramName = op.getParams().get(j).getName();
                    boolean vectorParam = false;
                    for (int i = 0; i < numVector; i++) {
                        if (paramName.equals(vectorList.get(i))) {
                    %>Sequence_<%=op.getName()%>_<%=i%><%
                            vectorParam = true;
                            break;
                        }
                    }
                    if (!vectorParam) {
                %><%=paramName%><%
                    }
                    if (j == (numParams - 1)) {
                        %>);<%
                    } else {
                        %>, <%
                    }
                } // end for params
%>
            } catch(...) {
	        //RESOLVE LOG_ERROR(<%=nameSpace%>_<%=interfaceName%>_Out_i, "Call to <%=op.getName()%> by <%=nameSpace%>_<%=interfaceName%>_Out_i failed");
            }
        }
    }

    return<% if (!"void".equals(op.getCxxReturnType())) {%> retval<%}%>;
}
<%
            } // end for Operations

            for (Attribute op : iface.getAttributes()) {
%>
<%=op.getCxxReturnType()%><%=_cppHelper.varReturnValue(op.getCxxReturnType(), op.getReturnType())%> <%=nameSpace%>_<%=interfaceName%>_Out_i::<%=op.getName()%>()
{
<%
                if (!"void".equals(op.getCxxReturnType())) {
                    String initialValue = _cppHelper.getInitialValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength());
%>
    <%=op.getCxxReturnType()%><%=_cppHelper.varReturnValue(op.getCxxReturnType(), op.getReturnType())%> retval<%if (!"".equals(initialValue)) {%> = <%=initialValue%><%}%>;
<%
                }
%>
    std::vector < std::pair < <%=nameSpace%>::<%=interfaceName%>_var, std::string > >::iterator i;

    boost::mutex::scoped_lock lock(updatingPortsLock);   // don't want to process while command information is coming in
    
    if (active) {
        for (i = outConnections.begin(); i != outConnections.end(); ++i) {
            try {
                retval = ((*i).first)-><%=op.getName()%>();
            } catch(...) {
	        //RESOLVE LOG_ERROR(<%=nameSpace%>_<%=interfaceName%>_Out_i, "Call to <%=op.getName()%> by <%=nameSpace%>_<%=interfaceName%>_Out_i failed");
            }
        }
    }

    return<% if (!"void".equals(op.getCxxReturnType())) {%> retval<%}%>;
}

<%
                if (!op.isReadonly()) {
%>
void <%=nameSpace%>_<%=interfaceName%>_Out_i::<%=op.getName()%>(<%=_cppHelper.getCppMapping(op.getCxxType())%> data)
{
    std::vector < std::pair < <%=nameSpace%>::<%=interfaceName%>_var, std::string > >::iterator i;

    boost::mutex::scoped_lock lock(updatingPortsLock);   // don't want to process while command information is coming in
    
    if (active) {
        for (i = outConnections.begin(); i != outConnections.end(); ++i) {
            try {
                ((*i).first)-><%=op.getName()%>(data);
            } catch(...) {
	        //RESOVLE LOG_ERROR(<%=nameSpace%>_<%=interfaceName%>_Out_i, "Call to <%=op.getName()%> by <%=nameSpace%>_<%=interfaceName%>_Out_i failed");
            }
        }
    }

    return;
}

<%
                } // end if readonly
            } // end for attributes

            }
        // end if interfaces
        } else {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + use.getRepID()));
        }

    } 
%>
