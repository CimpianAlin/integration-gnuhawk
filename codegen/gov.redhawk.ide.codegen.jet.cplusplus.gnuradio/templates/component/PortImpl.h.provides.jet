<%
/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of GNUHAWK.
 * 
 * GNUHAWK is free software: you can redistribute it and/or modify is under the 
 * terms of the GNU General Public License as published by the Free Software 
 * Foundation, either version 3 of the License, or (at your option) any later 
 * version.
 * 
 * GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * this program.  If not, see http://www.gnu.org/licenses/.
 */

%>
<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.gnuradio.template.component"
imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.cplusplus.CppHelper
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.codegen.jet.cplusplus.CppProperties
gov.redhawk.ide.idl.Attribute
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation
java.util.ArrayList
java.util.Arrays
java.util.List
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status 
org.eclipse.emf.common.util.EList"
class="PortImplHProvidesTemplate"
skeleton="../generator.skeleton2"
%>
<% 

    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softPkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softPkg, implSettings);
    EList<Provides> provides = softPkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    List<CppProperties.Property> properties = CppProperties.getProperties(softPkg);
    Provides pro = null;
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());

    CppHelper _cppHelper = new CppHelper();
    for (Provides entry : provides) {
        String intName = entry.getRepID();
        if (intName.equals(templ.getPortRepId())) {
            pro = entry;
            if (templ.isGenSupport()) {
                Interface iface = IdlUtil.getInstance().getInterface(search_paths, intName.split(":")[1], true);
                if (iface == null) {
                    throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + intName));
                }
                if (iface.getNameSpace().equals("ExtendedEvent")) {
%>
#include "ossie/MessageInterface.h"
<%
                	continue;
                }
                if (iface.getFullPath().contains("/COS/")) {
%>
#include "COS/<%=iface.getFilename()%>.hh"
<%
                } else {
%>
#include "<%=iface.getNameSpace() + "/" + iface.getFilename()%>.h"
<%
                }
            }
            break;
        }
    }    

    if ((pro != null) && templ.isGenClassDef()) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, pro.getRepID().split(":")[1], true);
        if (iface == null) {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + pro.getRepID()));
        }
        
        String nameSpace = iface.getNameSpace();
        String interfaceName = iface.getName();
        boolean pushPacketCall = false;
        boolean pushPacketXMLCall = false;
        String ppDataTransfer = "";
        String dataTransfer = "";
        String tmpDataTransfer = "";
        String rawTransferType = "char";
%>


//
//  Comparator method to search for matching SRI information if "a" matches "b"
//
typedef bool  (*SRICompare)( BULKIO::StreamSRI &a, BULKIO::StreamSRI &b);


bool CompareSRI(BULKIO::StreamSRI &SRI_1, BULKIO::StreamSRI &SRI_2);

// ----------------------------------------------------------------------------------------
// <%=nameSpace%>_<%=interfaceName%>_In_i declaration
// ----------------------------------------------------------------------------------------
<%
        if ("BULKIO".equals(nameSpace) && "dataSDDS".equals(interfaceName)) {
%>
class BULKIO_dataSDDS_In_i : public POA_BULKIO::dataSDDS, public Port_Provides_base_impl
{
public:
    BULKIO_dataSDDS_In_i(std::string port_name, <%=PREFIX%>_base *_parent);

    ~BULKIO_dataSDDS_In_i();

    BULKIO::PortUsageType state();
    BULKIO::PortStatistics* statistics();
    BULKIO::StreamSRISequence* attachedSRIs();

    class linkStatistics
    {
        public:
            struct statPoint {
                unsigned int elements;
                float queueSize;
                double secs;
                double usecs;
            };

            linkStatistics() {
                bitSize = 8.0;
                historyWindow = 10;
                receivedStatistics_idx = 0;
                receivedStatistics.resize(historyWindow);
                activeStreamIDs.resize(0);
                runningStats.elementsPerSecond = -1.0;
                runningStats.bitsPerSecond = -1.0;
                runningStats.callsPerSecond = -1.0;
                runningStats.averageQueueDepth = -1.0;
                runningStats.streamIDs.length(0);
                runningStats.timeSinceLastCall = -1;
                enabled = true;
            };

            ~linkStatistics() {
            }

            void setBitSize(double _bitSize) {
                bitSize = _bitSize;
            }

            void setEnabled(bool enable) {
                enabled = enable;
            }

            void update(unsigned int elementsReceived, float queueSize, bool EOS, std::string streamID) {
                if (!enabled) {
                    return;
                }
                struct timeval tv;
                struct timezone tz;
                gettimeofday(&tv, &tz);
                receivedStatistics[receivedStatistics_idx].elements = elementsReceived;
                receivedStatistics[receivedStatistics_idx].queueSize = queueSize;
                receivedStatistics[receivedStatistics_idx].secs = tv.tv_sec;
                receivedStatistics[receivedStatistics_idx++].usecs = tv.tv_usec;
                receivedStatistics_idx = receivedStatistics_idx % historyWindow;
                if (!EOS) {
                    std::list<std::string>::iterator p = activeStreamIDs.begin();
                    bool foundStreamID = false;
                    while (p != activeStreamIDs.end()) {
                        if (*p == streamID) {
                            foundStreamID = true;
                            break;
                        }
                        p++;
                    }
                    if (!foundStreamID) {
                        activeStreamIDs.push_back(streamID);
                    }
                } else {
                    std::list<std::string>::iterator p = activeStreamIDs.begin();
                    while (p != activeStreamIDs.end()) {
                        if (*p == streamID) {
                            activeStreamIDs.erase(p);
                            break;
                        }
                        p++;
                    }
                }
            }

            BULKIO::PortStatistics retrieve() {
                if (!enabled) {
                    return runningStats;
                }
                struct timeval tv;
                struct timezone tz;
                gettimeofday(&tv, &tz);

                int idx = (receivedStatistics_idx == 0) ? (historyWindow - 1) : (receivedStatistics_idx - 1);
                double front_sec = receivedStatistics[idx].secs;
                double front_usec = receivedStatistics[idx].usecs;
                double secDiff = tv.tv_sec - receivedStatistics[receivedStatistics_idx].secs;
                double usecDiff = (tv.tv_usec - receivedStatistics[receivedStatistics_idx].usecs) / ((double)1e6);
                double totalTime = secDiff + usecDiff;
                double totalData = 0;
                float queueSize = 0;
                int startIdx = (receivedStatistics_idx + 1) % historyWindow;
                for (int i = startIdx; i != receivedStatistics_idx; ) {
                    totalData += receivedStatistics[i].elements;
                    queueSize += receivedStatistics[i].queueSize;
                    i = (i + 1) % historyWindow;
                }
                runningStats.bitsPerSecond = ((totalData * bitSize) / totalTime);
                runningStats.elementsPerSecond = (totalData / totalTime);
                runningStats.averageQueueDepth = (queueSize / historyWindow);
                runningStats.callsPerSecond = (double(historyWindow - 1) / totalTime);
                runningStats.timeSinceLastCall = (((double)tv.tv_sec) - front_sec) + (((double)tv.tv_usec - front_usec) / ((double)1e6));
                unsigned int streamIDsize = activeStreamIDs.size();
                std::list< std::string >::iterator p = activeStreamIDs.begin();
                runningStats.streamIDs.length(streamIDsize);
                for (unsigned int i = 0; i < streamIDsize; i++) {
                    if (p == activeStreamIDs.end()) {
                        break;
                    }
                    runningStats.streamIDs[i] = CORBA::string_dup((*p).c_str());
                    p++;
                }
                return runningStats;
            }

        protected:
            bool enabled;
            double bitSize;
            BULKIO::PortStatistics runningStats;
            std::vector<statPoint> receivedStatistics;
            std::list< std::string > activeStreamIDs;
            unsigned long historyWindow;
            long receivedStatistics_idx;
    };

    void pushSRI(const BULKIO::StreamSRI& H, const BULKIO::PrecisionUTCTime& T);

    BULKIO::SDDSStreamDefinition* getStreamDefinition(const char* attachId);

    char* getUser(const char* attachId);

    BULKIO::dataSDDS::InputUsageState usageState();

    BULKIO::SDDSStreamSequence* attachedStreams();
    
    BULKIO::StringSequence* attachmentIds();

    char* attach(const BULKIO::SDDSStreamDefinition& stream, const char* userid)
        throw (BULKIO::dataSDDS::AttachError, BULKIO::dataSDDS::StreamInputError);

    void detach(const char* attachId);

    void enableStats(bool enable) {
        stats.setEnabled(enable);
    };

    void setBitSize(double bitSize) {
        stats.setBitSize(bitSize);
    };

    void updateStats(unsigned int elementsReceived, float queueSize, bool EOS, std::string streamID) {
        boost::mutex::scoped_lock lock(statUpdateLock);
        stats.update(elementsReceived, queueSize, EOS, streamID);
    };

protected:
    <%=PREFIX%>_i *parent;
    // maps a stream ID to a pair of Stream and userID
    std::map<std::string, BULKIO::SDDSStreamDefinition*> attachedStreamMap;
    std::map<std::string, std::string > attachedUsers;
    std::map<std::string, std::pair<BULKIO::StreamSRI, BULKIO::PrecisionUTCTime> > currentHs;
    boost::mutex statUpdateLock;
    boost::mutex sriUpdateLock;
    // statistics
    linkStatistics stats;

};
<%
        } else if (nameSpace.equals("ExtendedEvent") && interfaceName.equals("MessageEvent")) {
        	// no need to add a port declaration for provides message consumer
        } else {
%>
class <%=nameSpace%>_<%=interfaceName%>_In_i : public POA_<%=nameSpace%>::<%=interfaceName%>, public Port_Provides_base_impl
{
    public:
    
     class SRIListener {

       public:

          virtual void operator() ( <%=nameSpace%>_<%=interfaceName%>_In_i *, BULKIO::StreamSRI &  ) = 0;
     };
      
     //<%=nameSpace%>_<%=interfaceName%>_In_i(std::string port_name, <%=PREFIX%>_base *_parent);
     <%=nameSpace%>_<%=interfaceName%>_In_i(std::string port_name, SRIListener *listener=NULL, SRICompare cmp=CompareSRI);
     ~<%=nameSpace%>_<%=interfaceName%>_In_i();  
        
    

<%
            for (Operation op : iface.getOperations()) {
                int numParams = op.getParams().size();
%>
        <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>(<%
                if ("pushPacket".equals(op.getName()) && (numParams == 4)) {
                    ppDataTransfer = _cppHelper.getBaseSequenceMapping(op.getParams().get(0).getCxxType());
                    if (ppDataTransfer.startsWith("std::vector")) {
                        if (ppDataTransfer.endsWith("& ")) {
                            ppDataTransfer = ppDataTransfer.substring(12, ppDataTransfer.length() - 2);
                        } else { 
                            ppDataTransfer = ppDataTransfer.substring(12, ppDataTransfer.length() - 1);
                        }
                    } else if ("dataFile".equals(interfaceName)) {
                        ppDataTransfer = "char";
                    }
                    pushPacketCall = true;
                } else if ("pushPacket".equals(op.getName()) && "dataXML".equals(interfaceName)) {
                    ppDataTransfer = "char";
                    pushPacketXMLCall = true;
                }
                if (numParams == 0) {
                    %>);<%
                }
                for (int i = 0; i < numParams; i++) {
        %><%=op.getParams().get(i).getCxxType()%><%
        %> <%=op.getParams().get(i).getName()%><%
                    if (i == (numParams - 1)) {
                        %>);<%
                    } else {
                        %>, <%
                    }
                } // end for params
            } // end for operations
            
	    String nativeType = "Int8";
	    //System.out.println("PortImpl.h.provides " + ppDataTransfer );
	    if (ppDataTransfer.contains("Float")) {
		nativeType = "Float";
	    } else if (ppDataTransfer.contains("Octet")) {
        		nativeType = "UInt8";
            } else if (ppDataTransfer.contains("Char")) {
        		nativeType = "Char";
            } else if (ppDataTransfer.contains("unsigned char")) {
        	         nativeType = "UInt8";
            } else if (ppDataTransfer.contains("Ushort")) {
			    nativeType = "UInt16";
            } else if (ppDataTransfer.contains("Short")) {
			    nativeType = "Int16";
            } else if (ppDataTransfer.contains("Long")) {
			    nativeType = "Int32";
            } else if (ppDataTransfer.contains("LongLong")) {
			    nativeType = "Int64";
            } else if (ppDataTransfer.contains("Ulong")) {
			    nativeType = "UInt32";
            } else if (ppDataTransfer.contains("Ulonglong")) {
			    nativeType = "UInt64";
            } else if (ppDataTransfer.contains("Double")) {
        		nativeType = "Double";
            }
%>

     	typedef <%=ppDataTransfer%>         RH_TransportType;
        typedef <%=nativeType%>        RH_NativeType;

<%
            for (Attribute op : iface.getAttributes()) {
%>
        <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=op.getName()%>();
<%
                if (!op.isReadonly()) {
%>
        void <%=op.getName()%>(<%=op.getCxxType()%> data);

<%
                } // end if readonly
            } // end for attributes
            
            if (pushPacketCall || pushPacketXMLCall) {
                String firstType = "";
                String cast = "";
%>
        int getCurrentQueueDepth();
        int getMaxQueueDepth();
        void setMaxQueueDepth(int newDepth);

        class linkStatistics
        {
            public:
                struct statPoint {
                    unsigned int elements;
                    float queueSize;
                    double secs;
                    double usecs;
                };

                linkStatistics() {
                    bitSize = sizeof(<%=ppDataTransfer%>) * 8.0;
                    historyWindow = 10;
                    receivedStatistics_idx = 0;
                    receivedStatistics.resize(historyWindow);
                    activeStreamIDs.resize(0);
                    runningStats.elementsPerSecond = -1.0;
                    runningStats.bitsPerSecond = -1.0;
                    runningStats.callsPerSecond = -1.0;
                    runningStats.averageQueueDepth = -1.0;
                    runningStats.streamIDs.length(0);
                    runningStats.timeSinceLastCall = -1;
                    enabled = true;
                    flush_sec = 0;
                    flush_usec = 0;
                };

                ~linkStatistics() {
                }

                void setEnabled(bool enableStats) {
                    enabled = enableStats;
                }

                void update(unsigned int elementsReceived, float queueSize, bool EOS, std::string streamID, bool flush) {
                    if (!enabled) {
                        return;
                    }
                    struct timeval tv;
                    struct timezone tz;
                    gettimeofday(&tv, &tz);
                    receivedStatistics[receivedStatistics_idx].elements = elementsReceived;
                    receivedStatistics[receivedStatistics_idx].queueSize = queueSize;
                    receivedStatistics[receivedStatistics_idx].secs = tv.tv_sec;
                    receivedStatistics[receivedStatistics_idx++].usecs = tv.tv_usec;
                    receivedStatistics_idx = receivedStatistics_idx % historyWindow;
                    if (flush) {
                        flush_sec = tv.tv_sec;
                        flush_usec = tv.tv_usec;
                    }
                    if (!EOS) {
                        std::list<std::string>::iterator p = activeStreamIDs.begin();
                        bool foundStreamID = false;
                        while (p != activeStreamIDs.end()) {
                            if (*p == streamID) {
                                foundStreamID = true;
                                break;
                            }
                            p++;
                        }
                        if (!foundStreamID) {
                            activeStreamIDs.push_back(streamID);
                        }
                    } else {
                        std::list<std::string>::iterator p = activeStreamIDs.begin();
                        while (p != activeStreamIDs.end()) {
                            if (*p == streamID) {
                                activeStreamIDs.erase(p);
                                break;
                            }
                            p++;
                        }
                    }
                }

                BULKIO::PortStatistics retrieve() {
                    if (!enabled) {
                        return runningStats;
                    }
                    struct timeval tv;
                    struct timezone tz;
                    gettimeofday(&tv, &tz);

                    int idx = (receivedStatistics_idx == 0) ? (historyWindow - 1) : (receivedStatistics_idx - 1);
                    double front_sec = receivedStatistics[idx].secs;
                    double front_usec = receivedStatistics[idx].usecs;
                    double secDiff = tv.tv_sec - receivedStatistics[receivedStatistics_idx].secs;
                    double usecDiff = (tv.tv_usec - receivedStatistics[receivedStatistics_idx].usecs) / ((double)1e6);
                    double totalTime = secDiff + usecDiff;
                    double totalData = 0;
                    float queueSize = 0;
                    int startIdx = (receivedStatistics_idx + 1) % historyWindow;
                    for (int i = startIdx; i != receivedStatistics_idx; ) {
                        totalData += receivedStatistics[i].elements;
                        queueSize += receivedStatistics[i].queueSize;
                        i = (i + 1) % historyWindow;
                    }
                    runningStats.bitsPerSecond = ((totalData * bitSize) / totalTime);
                    runningStats.elementsPerSecond = (totalData / totalTime);
                    runningStats.averageQueueDepth = (queueSize / historyWindow);
                    runningStats.callsPerSecond = (double(historyWindow - 1) / totalTime);
                    runningStats.timeSinceLastCall = (((double)tv.tv_sec) - front_sec) + (((double)tv.tv_usec - front_usec) / ((double)1e6));
                    unsigned int streamIDsize = activeStreamIDs.size();
                    std::list< std::string >::iterator p = activeStreamIDs.begin();
                    runningStats.streamIDs.length(streamIDsize);
                    for (unsigned int i = 0; i < streamIDsize; i++) {
                        if (p == activeStreamIDs.end()) {
                            break;
                        }
                        runningStats.streamIDs[i] = CORBA::string_dup((*p).c_str());
                        p++;
                    }
                    if ((flush_sec != 0) && (flush_usec != 0)) {
                        double flushTotalTime = (((double)tv.tv_sec) - flush_sec) + (((double)tv.tv_usec - flush_usec) / ((double)1e6));
                        runningStats.keywords.length(1);
                        runningStats.keywords[0].id = CORBA::string_dup("timeSinceLastFlush");
                        runningStats.keywords[0].value <<= CORBA::Double(flushTotalTime);
                    }
                    return runningStats;
                }

            protected:
                bool enabled;
                double bitSize;
                BULKIO::PortStatistics runningStats;
                std::vector<statPoint> receivedStatistics;
                std::list< std::string > activeStreamIDs;
                unsigned long historyWindow;
                long receivedStatistics_idx;
                double flush_sec;
                double flush_usec;
        };
        
        void enableStats(bool enable) {
            stats.setEnabled(enable);
        };

<%
                if (pushPacketCall) {
%>

        class dataTransfer
        {
            public:
                dataTransfer(<%
                for (Operation op : iface.getOperations()) {
                    int numParams = op.getParams().size();
                    if ("pushPacket".equals(op.getName()) && (numParams == 4)) {
                        %><%=op.getParams().get(0).getCxxType()%><%
                        firstType = op.getParams().get(0).getCxxType();
                        int start = (firstType.startsWith("const ")) ? 6 : 0;
                        int end = (firstType.endsWith("&")) ? firstType.length() - 1 : firstType.length();
                        firstType = firstType.substring(start, end);
                        
                        if (ppDataTransfer.endsWith("long")) {
                        	cast = "(" + ppDataTransfer + " int *)";
                        }
                    }
                }
                %> data, const BULKIO::PrecisionUTCTime &_T, bool _EOS, const char* _streamID, BULKIO::StreamSRI &_H, bool _sriChanged, bool _inputQueueFlushed)
                {
<%
                    if ("dataFile".equals(interfaceName)) {
%>
                    dataBuffer = data;
<%
                    } else {
%>
                    int dataLength = data.length();

#ifdef EXPECTED_VECTOR_IMPL
<%
                    if ("dataChar".equals(interfaceName)) {
%>
                    std::_Vector_base<char, _seqVector::seqVectorAllocator<char> >::_Vector_impl *vectorPointer = (std::_Vector_base<char, _seqVector::seqVectorAllocator<char> >::_Vector_impl *) ((void*) & dataBuffer);
                    unsigned char *tmp_2 = const_cast<PortTypes::CharSequence*>(&data)->get_buffer(1);
                    char *tmp = (char *) tmp_2;
                    vectorPointer->_M_start = tmp;
<%
                    } else {
%>
                    std::_Vector_base<<%=ppDataTransfer%>, _seqVector::seqVectorAllocator<<%=ppDataTransfer%>> >::_Vector_impl *vectorPointer = (std::_Vector_base<<%=ppDataTransfer%>, _seqVector::seqVectorAllocator<<%=ppDataTransfer%>> >::_Vector_impl *) ((void*) & dataBuffer);
                    vectorPointer->_M_start = <%if (!cast.equals("")) {%><%=cast%><% } %>const_cast<<%=firstType%>*>(&data)->get_buffer(1);
<%
                    }
%>

                    vectorPointer->_M_finish = vectorPointer->_M_start + dataLength;
                    vectorPointer->_M_end_of_storage = vectorPointer->_M_finish;

#else
                    dataBuffer.resize(dataLength);
                    if (dataLength > 0) {
                        memcpy(&dataBuffer[0], &data[0], dataLength * sizeof(data[0]));
                    }

#endif
<%
                    }
%>
                    T = _T;
                    EOS = _EOS;
                    streamID = _streamID;
                    SRI = _H;
                    sriChanged = _sriChanged;
                    inputQueueFlushed = _inputQueueFlushed;
                };

<%
                    if ("dataFile".equals(interfaceName)) {
%>
                std::string dataBuffer;
<%
                    } else {
%>
#ifdef EXPECTED_VECTOR_IMPL
<%
                    if ("dataChar".equals(interfaceName)) {
%>
                std::vector< char, _seqVector::seqVectorAllocator<char> > dataBuffer;
<%
                    } else {
%>
                std::vector< <%=ppDataTransfer%>, _seqVector::seqVectorAllocator<<%=ppDataTransfer%>> > dataBuffer;
<%
                    }
%>
#else
<%
                    if ("dataChar".equals(interfaceName)) {
%>
                std::vector<char> dataBuffer;
<%
                    } else {
%>
                std::vector<<%=ppDataTransfer%>> dataBuffer;
<%
                    }
%>
#endif
<%
                    }
%>
                BULKIO::PrecisionUTCTime T;
                bool EOS;
                std::string streamID;
                BULKIO::StreamSRI SRI;
                bool sriChanged;
                bool inputQueueFlushed;
        };

        dataTransfer *getPacket(float timeout, std::string streamID);
        void block();
        void unblock();
        bool blocked();
<%
                } else if (pushPacketXMLCall) {
%>
        class dataTransfer
        {
            public:
                dataTransfer(const char *data, bool _EOS, const char* _streamID, BULKIO::StreamSRI &_H, bool _sriChanged, bool _inputQueueFlushed)
                {
                    dataBuffer = data;
                    EOS = _EOS;
                    streamID = _streamID;
                    SRI = _H;
                    sriChanged = _sriChanged;
                    inputQueueFlushed = _inputQueueFlushed;
                };

                std::string dataBuffer;
                bool EOS;
                std::string streamID;
                BULKIO::StreamSRI SRI;
                bool sriChanged;
                bool inputQueueFlushed;
        };

        dataTransfer *getPacket(float timeout, std::string streamID);
        void block();
        void unblock();

<%
                }
            }
            if ("BULKIO".equals(nameSpace)) {
%>

    protected:
    	typedef  std::map<std::string, std::pair<BULKIO::StreamSRI, bool> > 	RH_SRIMap;
    
        //<%=PREFIX%>_i *parent;
        SRICompare     sriCmp;
	    SRIListener   *sriListener;
        std::deque<dataTransfer *> workQueue;
        unsigned int lastQueueSize;
        RH_SRIMap     currentHs;
        boost::mutex dataBufferLock;
        boost::mutex sriUpdateLock;
        boost::mutex dataAvailableMutex;
        boost::condition_variable dataAvailable;
        unsigned long secs, nsecs, timeout_secs, timeout_nsecs;
        bool breakBlock;
        bool blocking;
        queueSemaphore* queueSem;

<%
                if (pushPacketCall || pushPacketXMLCall) {
%>
        // statistics
        linkStatistics stats;

<%
                }
            } else {
%>

    protected:
        <%=PREFIX%>_i *parent;
        boost::mutex portAccess;

<%
                for (Operation op : iface.getOperations()) {
                    ArrayList<String> vectorList = new ArrayList<String>();
                    for (int i = 0; i < op.getParams().size(); i++) {
                        String iteratorBase = _cppHelper.getBaseSequenceMapping(op.getParams().get(i).getCxxType());
                        if (iteratorBase.length() > 11) {
                            if (iteratorBase.substring(0, 11).equals("std::vector")) {
                                vectorList.add(op.getParams().get(i).getName());
                            }
                        }
                    }
                    for (int i = 0; i < vectorList.size(); i++) {
                        String iteratorBase = _cppHelper.getBaseSequenceMapping(op.getParams().get(i).getCxxType());
%>
    <%=iteratorBase%> vector_<%=op.getName()%>_<%=i%>;
    
<%
                    }
                } // end for Operations
            } // end if pushPacket
%>
};
<%
        } // end not BULKIO or pushXML
    } // end if genClassDef
%>
