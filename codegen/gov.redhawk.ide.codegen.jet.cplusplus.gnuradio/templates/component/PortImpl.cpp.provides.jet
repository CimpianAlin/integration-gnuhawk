<%
/*
 * This file is protected by Copyright. Please refer to the COPYRIGHT file 
 * distributed with this source distribution.
 * 
 * This file is part of GNUHAWK.
 * 
 * GNUHAWK is free software: you can redistribute it and/or modify is under the 
 * terms of the GNU General Public License as published by the Free Software 
 * Foundation, either version 3 of the License, or (at your option) any later 
 * version.
 * 
 * GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with 
 * this program.  If not, see http://www.gnu.org/licenses/.
 */

%>
<%@ jet package="gov.redhawk.ide.codegen.jet.cplusplus.gnuradio.template.component"
imports="gov.redhawk.ide.RedhawkIdeActivator
gov.redhawk.ide.codegen.ImplementationSettings
gov.redhawk.ide.codegen.cplusplus.CppHelper
gov.redhawk.ide.codegen.jet.TemplateParameter
gov.redhawk.ide.codegen.jet.cplusplus.CplusplusJetGeneratorPlugin
gov.redhawk.ide.idl.Attribute
gov.redhawk.ide.idl.IdlUtil
gov.redhawk.ide.idl.Interface
gov.redhawk.ide.idl.Operation
java.util.Arrays
java.util.List
mil.jpeojtrs.sca.scd.Provides
mil.jpeojtrs.sca.spd.Implementation
mil.jpeojtrs.sca.spd.SoftPkg
org.eclipse.core.runtime.CoreException
org.eclipse.core.runtime.IPath
org.eclipse.core.runtime.IStatus
org.eclipse.core.runtime.Status
org.eclipse.emf.common.util.EList"
class="PortImplCppProvidesTemplate"
skeleton="../generator.skeleton2" 
%><%
    TemplateParameter templ = (TemplateParameter) argument;
    ImplementationSettings implSettings = templ.getImplSettings();
    Implementation impl = templ.getImpl();
    SoftPkg softpkg = (SoftPkg) impl.eContainer();
    String PREFIX = gov.redhawk.ide.codegen.util.CodegenFileHelper.getPreferredFilePrefix(softpkg, implSettings);
    EList<Provides> provides = softpkg.getDescriptor().getComponent().getComponentFeatures().getPorts().getProvides();
    Provides pro = null;
    List<IPath> search_paths = Arrays.asList(RedhawkIdeActivator.getDefault().getDefaultIdlIncludePath());
    CppHelper _cppHelper = new CppHelper();
    for (Provides entry : provides) {
        String intName = entry.getRepID();
        if (intName.equals(templ.getPortRepId())) {
            pro = entry;
            break;
        }
    }

    if ((pro != null) && templ.isGenClassImpl() && (!pro.getRepID().equals("IDL:ExtendedEvent/MessageEvent:1.0"))) {
        Interface iface = IdlUtil.getInstance().getInterface(search_paths, pro.getRepID().split(":")[1], true);
        if (iface != null) {
            String nameSpace = iface.getNameSpace();
            String interfaceName = iface.getName();
            if ("BULKIO".equals(nameSpace)) {
%>
<%@ include file="BULKIOPortImpl.cpp.provides.jetinc"%>
<%
            } else {
%>

// ----------------------------------------------------------------------------------------
// <%=nameSpace%>_<%=interfaceName%>_In_i definition
// ----------------------------------------------------------------------------------------
<%=nameSpace%>_<%=interfaceName%>_In_i::<%=nameSpace%>_<%=interfaceName%>_In_i(std::string port_name, SRIListener *listener, SRICompare cmpFunc ) : 
Port_Provides_base_impl(port_name)
{
    parent = static_cast<<%=PREFIX%>_i *> (_parent);
}

<%=nameSpace%>_<%=interfaceName%>_In_i::~<%=nameSpace%>_<%=interfaceName%>_In_i()
{
}

<%
                for (Operation op : iface.getOperations()) {
                    int numParams = op.getParams().size();
%>

<%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=nameSpace%>_<%=interfaceName%>_In_i::<%=op.getName()%>(<%if (op.getParams().size() == 0) {%>)<%}
                    for (int i = 0; i < numParams; i++) {
                
                %><%=op.getParams().get(i).getCxxType()%><%
                %> <%=op.getParams().get(i).getName()%><%
                        if (i == (numParams - 1)) {
                        %>)<%
                        } else {
                        %>, <%
                        }
                    } // end for params
%>
{
    boost::mutex::scoped_lock lock(portAccess);
<%
                    if (!"void".equals(op.getCxxReturnType())) {
                        String initialValue = _cppHelper.getInitialValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength());
%>
    <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> tmpVal<%if (!"".equals(initialValue)) {%> = <%=initialValue%><%}%>;
<%
                    }
%>
    // TODO: Fill in this function
<%
                    if (!"void".equals(op.getCxxReturnType())) {
%>

    return <% if ("char*".equals(op.getCxxReturnType())) { %>CORBA::string_dup(<%}%>tmpVal<% if ("char*".equals(op.getCxxReturnType())) { %>)<% }%>;
<%
                    }
%>
}

<%
                } // end for operations
                for (Attribute op : iface.getAttributes()) {
%>
<%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%> <%=nameSpace%>_<%=interfaceName%>_In_i::<%=op.getName()%>()
{
    boost::mutex::scoped_lock lock(portAccess);
    
<%
                    if (!"void".equals(op.getCxxReturnType())) {
%>
    <%if ("char*".equals(op.getCxxReturnType())) {%>
    char<%} else {%>
    <%=op.getCxxReturnType()%><%=_cppHelper.pointerReturnValue(op.getCxxReturnType(), op.getReturnType(), op.isCxxReturnTypeVariableLength())%><%}%> tmpVal<%if ("char*".equals(op.getCxxReturnType())) {%>[255] = {0};<%} else {%> = 0<%}%>;
<%
                    }
                    if (!"void".equals(op.getCxxReturnType())) {
%>
    // TODO: Fill in this function

    return <% if ("char*".equals(op.getCxxReturnType())) { %>CORBA::string_dup(<%}%>tmpVal<% if ("char*".equals(op.getCxxReturnType())) { %>)<% }%>;
<%
                    }
%>
}

<%
                    if (!op.isReadonly()) {
%>
void <%=nameSpace%>_<%=interfaceName%>_In_i::<%=op.getName()%>(<%=op.getCxxType()%> data)
{
    boost::mutex::scoped_lock lock(portAccess);
    
    // TODO: Fill in this function
}

<%
                    } // end if readonly
                } // end for attributes
            } // end if !bulkio
        // end if interfaces
        } else {
            throw new CoreException(new Status(IStatus.ERROR, CplusplusJetGeneratorPlugin.PLUGIN_ID, "Unable to find interface for " + pro.getRepID()));
        }
    } // end for providesList
%>
