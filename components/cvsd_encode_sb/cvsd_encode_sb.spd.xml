<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is protected by Copyright. Please refer to the COPYRIGHT file 
distributed with this source distribution.

This file is part of GNUHAWK.

GNUHAWK is free software: you can redistribute it and/or modify is under the 
terms of the GNU General Public License as published by the Free Software 
Foundation, either version 3 of the License, or (at your option) any later 
version.

GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program.  If not, see http://www.gnu.org/licenses/.
-->

<!DOCTYPE softpkg PUBLIC "-//JTRS//DTD SCA V2.2.2 SPD//EN" "softpkg.dtd">
<softpkg id="DCE:be1eba57-fa8c-48cb-bdae-671d3f90dfb6" name="cvsd_encode_sb" type="sca_compliant">
  <title></title>
  <author>
    <name>null</name>
  </author>
  <propertyfile type="PRF">
    <localfile name="cvsd_encode_sb.prf.xml"/>
  </propertyfile>
  <descriptor>
    <localfile name="cvsd_encode_sb.scd.xml"/>
  </descriptor>
  <implementation id="cpp">
    <description>This block performs CVSD audio encoding.  Its design and implementation
is modeled after the CVSD encoder/decoder specifications defined in the
Bluetooth standard.

CVSD is a method for encoding speech that seeks to reduce the
bandwidth required for digital voice transmission.  CVSD takes
advantage of strong correlation between samples, quantizing the
difference in amplitude between two consecutive samples.  This
difference requires fewer quantization levels as compared to other
methods that quantize the actual amplitude level, reducing the
bandwidth.  CVSD employs a two level quantizer (one bit) and an
adaptive algorithm that allows for continuous step size adjustment.

The coder can represent low amplitude signals with accuracy without
sacrificing performance on large amplitude signals, a trade off that
occurs in some non-adaptive modulations.

The CVSD encoder effectively provides 8-to-1 compression.  More
specifically, each incoming audio sample is compared to an internal
reference value.  If the input is greater or equal to the reference,
the encoder outputs a &quot;1&quot; bit.  If the input is less than the reference,
the encoder outputs a &quot;0&quot; bit.  The reference value is then updated
accordingly based on the frequency of outputted &quot;1&quot; or &quot;0&quot; bits.  By
grouping 8 outputs bits together, the encoder essentially produce one
output byte for every 8 input audio samples.

This encoder requires that input audio samples are 2-byte short signed
integers.  The result bandwidth conversion, therefore, is 16 input bytes
of raw audio data to 1 output byte of encoded audio data.

The CVSD encoder module must be prefixed by an up-converter to over-sample
the audio data prior to encoding.  The Bluetooth standard specifically
calls for a 1-to-8 interpolating up-converter.  While this reduces the
overall compression of the codec, this is required so that the encoder
can accurately compute the slope between adjacent audio samples and
correctly update its internal reference value.

The default values are modeled after the Bluetooth standard and should
not be changed except by an advanced user

param: min_step ->       Minimum step size used to update the internal reference.  Default: &quot;10&quot;
param: max_step ->      Maximum step size used to update the internal reference.  Default: &quot;1280&quot;
param: step_decay ->    Decay factor applied to step size when there is not a run of J output 1s or 0s.  Default: &quot;0.9990234375&quot;  (i.e. 1-1/1024)
param: accum_decay ->   Decay factor applied to the internal reference during every interation of the codec.  Default: &quot;0.96875&quot;  (i.e. 1-1/32)
param: K ->             Size of shift register; the number of output bits remembered by codec (must be less or equal to 32).  Default: &quot;32&quot;
param: J ->             Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: &quot;4&quot;
param: pos_accum_max -> Maximum integer value allowed for the internal reference.  Default: &quot;32767&quot; (2^15 - 1 or MAXSHORT)
param: neg_accum_max ->  Minimum integer value allowed for the internal reference.  Default: &quot;-32767&quot; (-2^15 + 1 or MINSHORT+1)

References:

1.  Continuously Variable Slope Delta Modulation (CVSD) A Tutorial,
    Available: http://www.eetkorea.com/ARTICLES/2003AUG/A/2003AUG29_NTEK_RFD_AN02.PDF.
2.  Specification of The Bluetooth System
     Available: http://grouper.ieee.org/groups/802/15/Bluetooth/core_10_b.pdf.

3.  McGarrity, S., Bluetooth Full Duplex Voice and Data Transmission. 2002.
     Bluetooth Voice SimulinkÂ® Model, Available:
     http://www.mathworks.com/company/newsletters/digest/nov01/bluetooth.html</description>
    <code type="Executable">
      <localfile name="cpp/cvsd_encode_sb"/>
      <entrypoint>cpp/cvsd_encode_sb</entrypoint>
    </code>
    <compiler name="/usr/bin/gcc" version="4.1.2"/>
    <programminglanguage name="C++"/>
    <humanlanguage name="EN"/>
    <os name="Linux"/>
    <processor name="x86"/>
    <processor name="x86_64"/>
    <dependency type="other">
      <softpkgref>
        <localfile name="/deps/gnuhawk/gnuhawk.spd.xml"/>
      </softpkgref>
    </dependency>
  </implementation>
</softpkg>
