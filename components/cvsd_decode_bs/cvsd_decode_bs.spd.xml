<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is protected by Copyright. Please refer to the COPYRIGHT file 
distributed with this source distribution.

This file is part of GNUHAWK.

GNUHAWK is free software: you can redistribute it and/or modify is under the 
terms of the GNU General Public License as published by the Free Software 
Foundation, either version 3 of the License, or (at your option) any later 
version.

GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program.  If not, see http://www.gnu.org/licenses/.
-->

<!DOCTYPE softpkg PUBLIC "-//JTRS//DTD SCA V2.2.2 SPD//EN" "softpkg.dtd">
<softpkg id="DCE:cfd68fb5-154e-4b4f-9cfb-107595ae59c4" name="cvsd_decode_bs" type="sca_compliant">
  <title></title>
  <author>
    <name>null</name>
  </author>
  <propertyfile type="PRF">
    <localfile name="cvsd_decode_bs.prf.xml"/>
  </propertyfile>
  <descriptor>
    <localfile name="cvsd_decode_bs.scd.xml"/>
  </descriptor>
  <implementation id="cpp">
    <description>This block performs CVSD audio decoding.  Its design and implementation
is modeled after the CVSD encoder/decoder specifications defined in the
Bluetooth standard.

CVSD is a method for encoding speech that seeks to reduce the
bandwidth required for digital voice transmission.  CVSD takes
advantage of strong correlation between samples, quantizing the
difference in amplitude between two consecutive samples.  This
difference requires fewer quantization levels as compared to other
methods that quantize the actual amplitude level, reducing the
bandwidth.  CVSD employs a two level quantizer (one bit) and an
adaptive algorithm that allows for continuous step size adjustment.

The coder can represent low amplitude signals with accuracy without
sacrificing performance on large amplitude signals, a trade off that
occurs in some non-adaptive modulations.

The CVSD decoder effectively provides 1-to-8 decompression.  More
specifically, for each incoming input bit, the decoder outputs one
audio sample.  If the input is a &quot;1&quot; bit, the internal reference is
increased appropriately and then outputted as the next estimated audio
sample.  If the input is a &quot;0&quot; bit, the internal reference is
decreased appropriately and then likewise outputted as the next estimated
audio sample.  Grouping 8 input bits together, the encoder essentially
produces 8 output audio samples for everyone one input byte.

This decoder requires that output audio samples are 2-byte short signed
integers.  The result bandwidth conversion, therefore, is 1 byte of
encoded audio data to 16 output bytes of raw audio data.

The CVSD decoder module must be post-fixed by a down-converter to
under-sample the audio data after decoding.  The Bluetooth standard
specifically calls for a 8-to-1 decimating down-converter.  This is
required so that so that output sampling rate equals the original input
sampling rate present before the encoder.  In all cases, the output
down-converter rate must be the inverse of the input up-converter rate
before the CVSD encoder.

The default values are modeled after the Bluetooth standard and should not be changed,
except by an advanced user

param: min_step ->      Minimum step size used to update the internal reference.  Default: &quot;10&quot;
param: max_step ->      Maximum step size used to update the internal reference.  Default: &quot;1280&quot;
param: step_decay ->    Decay factor applied to step size when there is not a run of J output 1s or 0s.  Default: &quot;0.9990234375&quot;  (i.e. 1-1/1024)
param: accum_decay ->   Decay factor applied to the internal reference during every interation of the codec.  Default: &quot;0.96875&quot;  (i.e. 1-1/32)
param: K ->             Size of shift register; the number of output bits remembered by codec (must be less or equal to 32).  Default: &quot;32&quot;
param: J ->             Number of bits in the shift register that are equal; i.e. the size of a run of 1s, 0s. Default: &quot;4&quot;
param: pos_accum_max -> Maximum integer value allowed for the internal reference.  Default: &quot;32767&quot; (2^15 - 1 or MAXSHORT)
param: neg_accum_max -> Minimum integer value allowed for the internal reference.  Default: &quot;-32767&quot; (-2^15 + 1 or MINSHORT+1)

References:
1.  Continuously Variable Slope Delta Modulation (CVSD) A Tutorial,
        Available: http://www.eetkorea.com/ARTICLES/2003AUG/A/2003AUG29_NTEK_RFD_AN02.PDF.
2.  Specification of The Bluetooth System
        Available: http://grouper.ieee.org/groups/802/15/Bluetooth/core_10_b.pdf.
3.  McGarrity, S., Bluetooth Full Duplex Voice and Data Transmission. 2002.
        Bluetooth Voice SimulinkÂ® Model, Available:
        http://www.mathworks.com/company/newsletters/digest/nov01/bluetooth.html</description>
    <code type="Executable">
      <localfile name="cpp/cvsd_decode_bs"/>
      <entrypoint>cpp/cvsd_decode_bs</entrypoint>
    </code>
    <compiler name="/usr/bin/gcc" version="4.1.2"/>
    <programminglanguage name="C++"/>
    <humanlanguage name="EN"/>
    <os name="Linux"/>
    <processor name="x86"/>
    <processor name="x86_64"/>
    <dependency type="other">
      <softpkgref>
        <localfile name="/deps/gnuhawk/gnuhawk.spd.xml"/>
      </softpkgref>
    </dependency>
  </implementation>
</softpkg>
