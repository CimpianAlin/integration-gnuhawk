<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is protected by Copyright. Please refer to the COPYRIGHT file 
distributed with this source distribution.

This file is part of GNUHAWK.

GNUHAWK is free software: you can redistribute it and/or modify is under the 
terms of the GNU General Public License as published by the Free Software 
Foundation, either version 3 of the License, or (at your option) any later 
version.

GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program.  If not, see http://www.gnu.org/licenses/.
-->

<!DOCTYPE softpkg PUBLIC "-//JTRS//DTD SCA V2.2.2 SPD//EN" "softpkg.dtd">
<softpkg id="DCE:a490a195-0bd3-4736-a67c-fcb5a750a43a" name="fll_band_edge_cc_4o" type="sca_compliant">
  <title></title>
  <author>
    <name>null</name>
  </author>
  <propertyfile type="PRF">
    <localfile name="fll_band_edge_cc_4o.prf.xml"/>
  </propertyfile>
  <descriptor>
    <localfile name="fll_band_edge_cc_4o.scd.xml"/>
  </descriptor>
  <implementation id="cpp">
    <description>fll_band_edge_cc

Frequency Lock Loop using band-edge filters

The frequency lock loop derives a band-edge filter that covers the
upper and lower bandwidths of a digitally-modulated signal. The
bandwidth range is determined by the excess bandwidth (e.g.,
rolloff factor) of the modulated signal. The placement in frequency
of the band-edges is determined by the oversampling ratio (number
of samples per symbol) and the excess bandwidth.  The size of the
filters should be fairly large so as to average over a number of
symbols.

The FLL works by filtering the upper and lower band edges into
x_u(t) and x_l(t), respectively.  These are combined to form cc(t)
= x_u(t) + x_l(t) and ss(t) = x_u(t) - x_l(t). Combining these to
form the signal e(t) = Re{cc(t) \\times ss(t)^*} (where ^* is the
complex conjugate) provides an error signal at the DC term that is
directly proportional to the carrier frequency.  We then make a
second-order loop using the error signal that is the running
average of e(t).

In practice, the above equation can be simplified by just comparing
the absolute value squared of the output of both filters:
abs(x_l(t))^2 - abs(x_u(t))^2 = norm(x_l(t)) - norm(x_u(t)).

In theory, the band-edge filter is the derivative of the matched
filter in frequency, (H_be(f) = frac{H(f)}{df}). In practice,
this comes down to a quarter sine wave at the point of the matched
filter's rolloff (if it's a raised-cosine, the derivative of a
cosine is a sine).  Extend this sine by another quarter wave to
make a half wave around the band-edges is equivalent in time to the
sum of two sinc functions. The baseband filter fot the band edges
is therefore derived from this sum of sincs. The band edge filters
are then just the baseband signal modulated to the correct place in
frequency. All of these calculations are done in the
'design_filter' function.

Note: We use FIR filters here because the filters have to have a
flat phase response over the entire frequency range to allow their
comparisons to be valid.

It is very important that the band edge filters be the derivatives
of the pulse shaping filter, and that they be linear
phase. Otherwise, the variance of the error will be very large.

param: samps_per_sym -    (float) Number of samples per symbol of signal
param: rolloff -          (float) Rolloff (excess bandwidth) factor of signal
param: filter_size -      (int)   Size (in taps) of the filter
param: bandwidth -       (float) Loop bandwidth</description>
    <code type="Executable">
      <localfile name="cpp/fll_band_edge_cc_4o"/>
      <entrypoint>cpp/fll_band_edge_cc_4o</entrypoint>
    </code>
    <compiler name="/usr/bin/gcc" version="4.1.2"/>
    <programminglanguage name="C++"/>
    <humanlanguage name="EN"/>
    <os name="Linux"/>
    <processor name="x86"/>
    <processor name="x86_64"/>
    <dependency type="other">
      <softpkgref>
        <localfile name="/deps/gnuhawk/gnuhawk.spd.xml"/>
      </softpkgref>
    </dependency>
  </implementation>
</softpkg>
