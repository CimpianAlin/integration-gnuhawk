<?xml version="1.0" encoding="UTF-8"?>
<!--
This file is protected by Copyright. Please refer to the COPYRIGHT file 
distributed with this source distribution.

This file is part of GNUHAWK.

GNUHAWK is free software: you can redistribute it and/or modify is under the 
terms of the GNU General Public License as published by the Free Software 
Foundation, either version 3 of the License, or (at your option) any later 
version.

GNUHAWK is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program.  If not, see http://www.gnu.org/licenses/.
-->

<!DOCTYPE softpkg PUBLIC "-//JTRS//DTD SCA V2.2.2 SPD//EN" "softpkg.dtd">
<softpkg id="DCE:b535a258-3566-498a-91bf-773bab2a4af1" name="pfb_arb_resampler_ccf" type="sca_compliant">
  <title></title>
  <author>
    <name>null</name>
  </author>
  <propertyfile type="PRF">
    <localfile name="pfb_arb_resampler_ccf.prf.xml"/>
  </propertyfile>
  <descriptor>
    <localfile name="pfb_arb_resampler_ccf.scd.xml"/>
  </descriptor>
  <implementation id="cpp">
    <description>pfb_arb_resampler_ccf

Polyphase filterbank arbitrary resampler with
gr_complex input, gr_complex output and float taps

This block takes in a signal stream and performs arbitrary
resampling. The resampling rate can be any real number
r. The resampling is done by constructing N
filters where N is the interpolation rate.  We then
calculate D where D = floor(N/r).

Using N and D, we can perform rational
resampling where N/D is a rational number close to the
input rate r where we have N filters and we
cycle through them as a polyphase filterbank with a stride of
D so that i+1 = (i + D) % N.

To get the arbitrary rate, we want to interpolate between two
points. For each value out, we take an output from the current
filter, i, and the next filter i+1 and then
linearly interpolate between the two based on the real
resampling rate we want.

The linear interpolation only provides us with an approximation
to the real sampling rate specified. The error is a
quantization error between the two filters we used as our
interpolation points.  To this end, the number of filters,
N, used determines the quantization error; the larger
N, the smaller the noise. You can design for a
specified noise floor by setting the filter size (parameters
filter_size). The size defaults to 32 filters, which
is about as good as most implementations need.

The trick with designing this filter is in how to specify the
taps of the prototype filter. Like the PFB interpolator, the
taps are specified using the interpolated filter rate. In this
case, that rate is the input sample rate multiplied by the
number of filters in the filterbank, which is also the
interpolation rate. All other values should be relative to this
rate.

For example, for a 32-filter arbitrary resampler and using the
GNU Radio's firdes utility to build the filter, we build a
low-pass filter with a sampling rate of fs, a 3-dB
bandwidth of BW and a transition bandwidth of
TB. We can also specify the out-of-band attenuation to
usem ATT, and the filter window function (a
Blackman-harris window in this case). The first input is the
gain of the filter, which we specify here as the interpolation
rate 32.

self._taps = filter.firdes.low_pass_2(32, 32*fs, BW, TB,
attenuation_dB=ATT, window=filter.firdes.WIN_BLACKMAN_hARRIS)

The theory behind this block can be found in Chapter 7.5 of
the following book.

f. harris, &quot;Multirate Signal Processing for Communication
Systems&quot;, Upper Saddle River, NJ: Prentice Hall, Inc. 2004.

param: rate -  (float) Specifies the resampling rate to use
param: taps -  (vector/list of floats) The prototype filter to populate the filterbank. The taps
                        should be generated at the filter_size sampling rate.
param: filter_size -  (unsigned int) The number of filters in the filter bank. This is directly
                                 related to quantization noise introduced during the resampling.
                                 Defaults to 32 filters.</description>
    <code type="Executable">
      <localfile name="cpp/pfb_arb_resampler_ccf"/>
      <entrypoint>cpp/pfb_arb_resampler_ccf</entrypoint>
    </code>
    <compiler name="/usr/bin/gcc" version="4.1.2"/>
    <programminglanguage name="C++"/>
    <humanlanguage name="EN"/>
    <os name="Linux"/>
    <processor name="x86"/>
    <processor name="x86_64"/>
    <dependency type="other">
      <softpkgref>
        <localfile name="/deps/gnuhawk/gnuhawk.spd.xml"/>
      </softpkgref>
    </dependency>
  </implementation>
</softpkg>
